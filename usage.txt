#this file describes the common usage of Azure Service Bus currently within the team


from azure.servicebus.aio import ServiceBusClient
from azure.servicebus import ServiceBusMessage

self.client = ServiceBusClient.from_connection_string(
            conn_str, uamqp_transport=True


def send_message_to_status_queue(data):
    with SynchronousSbClient.from_connection_string(CONN_STRING_STATUS) as client:
        with client.get_queue_sender("status") as sender:
            data = json.dumps(data).encode("utf-8")
            single_message = ServiceBusMessage(data)
            sender.send_messages(single_message)




async def send_to_queue(queue_name: str, message: dict) -> None:
    """
    Sends a message to the assigned queue through Azure Servicebus

    Parameters
    ----------
    queue_name : str
        The queue to send the message to
    message : dict
        The message to send through the queue

    Raises
    ------
    Exception
        Raised when encountering a servicebus exception or when the message can not me transformed to json
    """
    async with sb_client[queue_name].get_queue_sender(queue_name) as sender:
        try:
            payload = json.dumps(message).encode("utf-8")
            await sender.send_messages(ServiceBusMessage(payload))
        except Exception as e:
            fastapi_logger.error("error", exc_info=True)
            raise Exception(f"Failed to send message to {queue_name}")



class AzureClient:
    def __init__(self, conn_str) -> None:
        self.client = ServiceBusClient.from_connection_string(
            conn_str, uamqp_transport=True
        )

    async def __aenter__(self):
        return self

    async def __aexit__(self, *args):
        await self.close()

    async def close(self):
        await self.client.close()

    async def start_receiving(self, queue_name: str, receiver: Receiver):
        # Constantly listen
        while True:
            try:
                async with self.client.get_queue_receiver(queue_name) as azure_receiver:
                    message: ServiceBusMessage  # for type hinting
                    logger.info(f"Start receiving on {queue_name}")

                    async for message in azure_receiver:
                        try:
                            if str(message) == "stop":
                                logger.info("Stop receiving messages")
                                break
                            await receiver.receive(str(message))

                        except Exception as e:
                            logger.error(e, exc_info=True)

                        finally:
                            await azure_receiver.complete_message(message)

            except Exception as e:
                logger.error(
                    f"Faced a critical error, attempting to restart after a 5 second break. Error: {e}",
                )
                await asyncio.sleep(5)

    async def send_message(self, queue_name: str, message: str):
        async with self.client.get_queue_sender(queue_name) as sender:
            await sender.send_messages(ServiceBusMessage(message))
